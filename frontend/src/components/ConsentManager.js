import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Checkbox } from './ui/checkbox';
import { Alert, AlertDescription } from './ui/alert';
import { Badge } from './ui/badge';
import { 
  Scale, Shield, AlertTriangle, CheckCircle, 
  Info, ExternalLink, FileText, Clock 
} from 'lucide-react';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

export default function ConsentManager({ 
  clientId, 
  onConsentGiven, 
  onConsentDeclined,
  requiredConsents = ['attorney_supervision'] 
}) {
  const [consents, setConsents] = useState({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [hasExistingConsent, setHasExistingConsent] = useState(false);
  const [showDetails, setShowDetails] = useState({});
  const [isInitialized, setIsInitialized] = useState(false);

  useEffect(() => {
    if (clientId) {
      checkExistingConsent();
    }
  }, [clientId]);

  const checkExistingConsent = async () => {
    try {
      const response = await axios.get(`${API}/client/consent/check/${clientId}`);
      const hasConsent = response.data.has_consent;
      setHasExistingConsent(hasConsent);
      setIsInitialized(true);
    } catch (error) {
      console.error('Failed to check existing consent:', error);
      // On error, don't assume anything about consent status
      setHasExistingConsent(false);
      setIsInitialized(true);
    }
  };

  const handleConsentChange = (consentType, granted) => {
    setConsents(prev => ({
      ...prev,
      [consentType]: granted
    }));
  };

  const handleSubmitConsent = async () => {
    setLoading(true);
    setError('');

    try {
      // Check if all required consents are given
      const allConsentsGiven = requiredConsents.every(type => consents[type]);
      
      if (!allConsentsGiven) {
        setError('Please provide all required consents to continue.');
        setLoading(false);
        return;
      }

      // Record consent for attorney supervision
      if (consents.attorney_supervision) {
        const consentData = {
          client_id: clientId,
          consent_text: getConsentText('attorney_supervision'),
          ip_address: await getUserIP(),
          user_agent: navigator.userAgent
        };

        await axios.post(`${API}/api/client/consent`, consentData);
      }

      setHasExistingConsent(true);
      onConsentGiven?.(true);
      
    } catch (error) {
      setError(error.response?.data?.detail || 'Failed to record consent');
    } finally {
      setLoading(false);
    }
  };

  const handleDeclineConsent = () => {
    onConsentDeclined?.();
  };

  const getUserIP = async () => {
    try {
      const response = await fetch('https://api.ipify.org?format=json');
      const data = await response.json();
      return data.ip;
    } catch (error) {
      return 'unknown';
    }
  };

  const getConsentText = (consentType) => {
    const consentTexts = {
      attorney_supervision: `
        I understand and agree that:
        
        1. All legal content, documents, and advice generated by this AI system requires supervision and review by a licensed attorney before use.
        
        2. The AI-generated content is for informational purposes only and does not constitute legal advice.
        
        3. I will not rely on AI-generated content without proper attorney review and approval.
        
        4. Use of this service does not create an attorney-client relationship between me and any attorney or law firm.
        
        5. I understand that laws vary by jurisdiction and that legal requirements may differ based on my specific circumstances.
        
        6. I agree to consult with a qualified attorney licensed in my jurisdiction before taking any legal action or making any legal decisions based on content from this system.
        
        7. I acknowledge that failure to obtain proper legal review may result in legal consequences and that I assume all risks associated with such failure.
        
        By providing this consent, I acknowledge that I have read, understood, and agree to these terms regarding attorney supervision of AI-generated legal content.
      `
    };
    
    return consentTexts[consentType] || '';
  };

  const getConsentDescription = (consentType) => {
    const descriptions = {
      attorney_supervision: {
        title: 'Attorney Supervision Consent',
        description: 'Required for all legal services to ensure compliance with legal practice regulations',
        icon: <Scale className="h-5 w-5 text-blue-600" />,
        importance: 'critical',
        details: [
          'All AI-generated legal content requires attorney review',
          'Ensures compliance with Unauthorized Practice of Law regulations',
          'Provides professional oversight and accountability',
          'Protects you from potential legal risks'
        ]
      }
    };
    
    return descriptions[consentType] || {};
  };

  const toggleDetails = (consentType) => {
    setShowDetails(prev => ({
      ...prev,
      [consentType]: !prev[consentType]
    }));
  };

  // Always show the consent form regardless of existing consent status

  return (
    <div className="space-y-6">
      <Card className="border-orange-200 bg-orange-50">
        <CardHeader>
          <div className="flex items-center space-x-2">
            <Shield className="h-6 w-6 text-orange-600" />
            <div>
              <CardTitle className="text-orange-800">Legal Consent Required</CardTitle>
              <CardDescription className="text-orange-700">
                Please review and provide consent for legal services
              </CardDescription>
            </div>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          <Alert className="border-orange-300 bg-orange-100">
            <Info className="h-4 w-4 text-orange-600" />
            <AlertDescription className="text-orange-800">
              <strong>Why is consent required?</strong>
              <p className="mt-1">
                Legal regulations require explicit consent for AI-generated legal content to ensure 
                proper attorney supervision and prevent unauthorized practice of law violations.
              </p>
            </AlertDescription>
          </Alert>

          {requiredConsents.map(consentType => {
            const consentInfo = getConsentDescription(consentType);
            return (
              <Card key={consentType} className="border-2 border-gray-200">
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      {consentInfo.icon}
                      <CardTitle className="text-base">{consentInfo.title}</CardTitle>
                    </div>
                    <Badge 
                      className={
                        consentInfo.importance === 'critical' 
                          ? 'bg-red-100 text-red-800 border-red-300'
                          : 'bg-yellow-100 text-yellow-800 border-yellow-300'
                      }
                    >
                      {consentInfo.importance === 'critical' ? 'REQUIRED' : 'OPTIONAL'}
                    </Badge>
                  </div>
                  <CardDescription>{consentInfo.description}</CardDescription>
                </CardHeader>
                <CardContent className="space-y-3">
                  {showDetails[consentType] && (
                    <div className="bg-gray-50 p-3 rounded text-sm">
                      <p className="font-medium mb-2">This consent covers:</p>
                      <ul className="list-disc list-inside space-y-1 text-gray-700">
                        {consentInfo.details?.map((detail, index) => (
                          <li key={index}>{detail}</li>
                        ))}
                      </ul>
                      
                      <div className="mt-3 p-3 bg-white rounded border text-xs">
                        <p className="font-medium mb-2">Full Consent Text:</p>
                        <div className="max-h-32 overflow-y-auto whitespace-pre-line">
                          {getConsentText(consentType)}
                        </div>
                      </div>
                    </div>
                  )}

                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id={`consent-${consentType}`}
                      checked={consents[consentType] || false}
                      onCheckedChange={(checked) => handleConsentChange(consentType, checked)}
                    />
                    <label 
                      htmlFor={`consent-${consentType}`}
                      className="text-sm font-medium cursor-pointer flex-1"
                    >
                      I have read, understood, and agree to the {consentInfo.title}
                    </label>
                  </div>

                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => toggleDetails(consentType)}
                    className="text-xs"
                  >
                    {showDetails[consentType] ? 'Hide Details' : 'View Full Terms'}
                  </Button>
                </CardContent>
              </Card>
            );
          })}

          {error && (
            <Alert className="border-red-200 bg-red-50">
              <AlertTriangle className="h-4 w-4 text-red-600" />
              <AlertDescription className="text-red-800">
                {error}
              </AlertDescription>
            </Alert>
          )}

          <div className="flex gap-4 pt-4">
            <Button
              onClick={handleSubmitConsent}
              disabled={loading || !requiredConsents.every(type => consents[type])}
              className="flex-1 bg-green-600 hover:bg-green-700"
            >
              {loading ? (
                <>
                  <Clock className="h-4 w-4 mr-2 animate-spin" />
                  Recording Consent...
                </>
              ) : (
                <>
                  <CheckCircle className="h-4 w-4 mr-2" />
                  Provide Consent & Continue
                </>
              )}
            </Button>
            <Button
              onClick={handleDeclineConsent}
              variant="outline"
              className="flex-1"
            >
              Decline & Exit
            </Button>
          </div>

          <div className="text-xs text-gray-600 space-y-1">
            <p>
              <strong>Privacy Notice:</strong> Your consent and usage data will be stored securely 
              and used only for providing legal services and ensuring compliance.
            </p>
            <p>
              <strong>Withdrawal:</strong> You may withdraw consent at any time by contacting support, 
              though this will prevent access to legal services.
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

export function ConsentStatusIndicator({ clientId, className = '' }) {
  const [consentStatus, setConsentStatus] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (clientId) {
      checkConsentStatus();
    }
  }, [clientId]);

  const checkConsentStatus = async () => {
    try {
      const response = await axios.get(`${API}/api/client/consent/check/${clientId}`);
      setConsentStatus(response.data);
    } catch (error) {
      console.error('Failed to check consent status:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className={`flex items-center space-x-2 ${className}`}>
        <Clock className="h-4 w-4 animate-spin text-gray-400" />
        <span className="text-sm text-gray-600">Checking consent...</span>
      </div>
    );
  }

  if (!consentStatus) {
    return null;
  }

  return (
    <div className={`flex items-center space-x-2 ${className}`}>
      {consentStatus.has_consent ? (
        <>
          <CheckCircle className="h-4 w-4 text-green-500" />
          <span className="text-sm text-green-700 font-medium">Consent Active</span>
        </>
      ) : (
        <>
          <AlertTriangle className="h-4 w-4 text-orange-500" />
          <span className="text-sm text-orange-700 font-medium">Consent Required</span>
        </>
      )}
    </div>
  );
}